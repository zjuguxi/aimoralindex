import { describe, beforeEach, vi, it, expect, afterEach } from "vitest";
import { Context } from "@netlify/functions/dist/function/context";
import { Event } from "@netlify/functions/dist/function/event";
import { Response } from "@netlify/functions/dist/function/response";
import { handler } from "./";
import { IEmailIntegrationConfig, invalidConfigs } from "./testHelpers";

describe("Preview handler", () => {
  const OLD_ENV = process.env;

  beforeEach(() => {
    vi.resetModules();
    process.env = {
      ...OLD_ENV,
      SITE_ID: "testSiteId",
      SITE_NAME: "testSiteName",
      CONTEXT: "dev",
      URL: "http://localhost:8888",
    };
  });

  afterEach(() => {
    process.env = OLD_ENV;
  });

  it.each(invalidConfigs)(
    "rejects requests with an invalid config with: %s",
    async (_, config, missingConfig) => {
      const invalidConfig = config as IEmailIntegrationConfig;
      process.env = { ...process.env, ...invalidConfig };

      const response = (await handler(
        {
          rawUrl: "http://localhost:8888/.netlify/functions/emails/confirm",
          httpMethod: "GET",
        } as unknown as Event,
        {} as unknown as Context
      )) as Response;

      // Get missingConfig object (missingConfig =) from html string
      // E.g. missingConfig = {"NETLIFY_EMAILS_PROVIDER":"mailgun","NETLIFY_EMAILS_API_KEY":"test" }
      const missingConfigObj = JSON.parse(
        response.body?.match(/missingConfig = ({.*})/)?.[1] ?? "{}"
      );

      // Get siteId variable from html string
      // E.g. siteId = "testSiteId"
      const siteId = response.body?.match(/siteId = "(.*)"/)?.[1];

      // Get templateName variable from html string
      // E.g. templateName = "booking-confirmed"
      const templateName = response.body?.match(/templateName = "(.*)"/)?.[1];

      expect(response.statusCode).toBe(200);

      expect(response.body).toContain(
        "<script defer src='https://netlify-integration-emails.netlify.app/index.js'>"
      );
      const expectedConfig = {
        [missingConfig as string]: true,
      };
      expect(missingConfigObj).toEqual(expectedConfig);
      expect(siteId).toBe("testSiteId");
      expect(templateName).toBe("confirm");
    }
  );

  it("should return the preview UI when template directory is not found", async () => {
    process.env.NETLIFY_EMAILS_SECRET = "test-secret";
    process.env.NETLIFY_EMAILS_DIRECTORY = "./fixtures/emails";
    process.env.NETLIFY_EMAILS_PROVIDER = "sendgrid";
    process.env.NETLIFY_EMAILS_PROVIDER_API_KEY = "some-key";

    const response = (await handler(
      {
        rawUrl:
          "http://localhost:8888/.netlify/functions/emails/does-not-exist",
        httpMethod: "GET",
      } as unknown as Event,
      {} as unknown as Context
    )) as Response;

    const templateName = response.body?.match(/templateName = "(.*)"/)?.[1];
    const missingTemplatBool = response.body?.match(
      /missingTemplate = (.*)/
    )?.[1];
    const emailDirectory = response.body?.match(/emailDirectory = "(.*)"/)?.[1];

    expect(response.statusCode).toBe(200);

    expect(response.body).toContain(
      "<script defer src='https://netlify-integration-emails.netlify.app/index.js'>"
    );

    expect(templateName).toBe("does-not-exist");
    expect(emailDirectory).toBe("./fixtures/emails");
    expect(missingTemplatBool).toBe("true");
  });

  it("should return the preview UI when template file is not found", async () => {
    process.env.NETLIFY_EMAILS_SECRET = "test-secret";
    process.env.NETLIFY_EMAILS_DIRECTORY = "./fixtures/emails";
    process.env.NETLIFY_EMAILS_PROVIDER = "sendgrid";
    process.env.NETLIFY_EMAILS_PROVIDER_API_KEY = "some-key";

    const response = (await handler(
      {
        rawUrl: "http://localhost:8888/.netlify/functions/emails/error",
        httpMethod: "GET",
      } as unknown as Event,
      {} as unknown as Context
    )) as Response;

    const templateName = response.body?.match(/templateName = "(.*)"/)?.[1];
    const missingTemplatBool = response.body?.match(
      /missingTemplate = (.*)/
    )?.[1];
    const emailDirectory = response.body?.match(/emailDirectory = "(.*)"/)?.[1];

    expect(response.statusCode).toBe(200);

    expect(response.body).toContain(
      "<script defer src='https://netlify-integration-emails.netlify.app/index.js'>"
    );

    expect(templateName).toBe("error");
    expect(emailDirectory).toBe("./fixtures/emails");
    expect(missingTemplatBool).toBe("true");
  });

  it("should return the preview UI", async () => {
    process.env.NETLIFY_EMAILS_SECRET = "test-secret";
    process.env.NETLIFY_EMAILS_DIRECTORY = "./fixtures/emails";
    process.env.NETLIFY_EMAILS_PROVIDER = "sendgrid";
    process.env.NETLIFY_EMAILS_PROVIDER_API_KEY = "some-key";

    const response = (await handler(
      {
        rawUrl: "http://localhost:8888/.netlify/functions/emails/confirm",
        httpMethod: "GET",
      } as unknown as Event,
      {} as unknown as Context
    )) as Response;

    const siteId = response.body?.match(/siteId = "(.*)"/)?.[1];
    const siteName = response.body?.match(/siteName = "(.*)"/)?.[1];
    const templateName = response.body?.match(/templateName = "(.*)"/)?.[1];
    const template = response.body?.match(/template = "(.*)"/)?.[1];
    const templateType = response.body?.match(/templateType = "(.*)"/)?.[1];
    const url = response.body?.match(/url = "(.*)"/)?.[1];
    const secret = response.body?.match(/secret = "(.*)"/)?.[1];

    const emailDirectory = response.body?.match(/emailDirectory = "(.*)"/)?.[1];

    expect(response.body).toContain(
      "<script defer src='https://netlify-integration-emails.netlify.app/index.js'>"
    );
    expect(response.statusCode).toBe(200);
    expect(siteId).toBe("testSiteId");
    expect(templateName).toBe("confirm");
    expect(template?.replace(/\s+/g, "").trim()).toBe(
      "<html>\\n<h1>{{name}}</h1>\\n<p>Thisistheconfirmemail</p>\\n</html>\\n"
    );
    expect(templateType).toBe("html");
    expect(url).toBe("http://localhost:8888");
    expect(secret).toEqual("test-secret");
    expect(emailDirectory).toEqual("./fixtures/emails");
    expect(siteName).toEqual("testSiteName");
  });
});
